---
// Contact section component
---

<section id="contact" class="py-20 bg-background">
  <div class="container mx-auto px-4">
    <div class="max-w-3xl mx-auto">
      <div class="text-center mb-12" data-animate="fade-up">
        <h2 class="text-3xl md:text-4xl font-bold mb-4">Get in Touch</h2>
        <p class="text-lg text-muted-foreground">
          Have questions or ready to enhance your security posture? Contact us today.
        </p>
      </div>
      
      <form 
        id="contactForm" 
        class="space-y-6 bg-card shadow-lg rounded-lg p-8"
        data-animate="fade-up"
      >
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-2">
            <label for="firstName" class="text-sm font-medium">First Name</label>
            <input 
              type="text" 
              id="firstName" 
              name="firstName" 
              required
              class="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
            />
            <p class="text-sm text-destructive hidden" id="firstNameError"></p>
          </div>
          
          <div class="space-y-2">
            <label for="lastName" class="text-sm font-medium">Last Name</label>
            <input 
              type="text" 
              id="lastName" 
              name="lastName" 
              required
              class="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
            />
            <p class="text-sm text-destructive hidden" id="lastNameError"></p>
          </div>
        </div>
        
        <div class="space-y-2">
          <label for="email" class="text-sm font-medium">Email</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required
            class="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
          />
          <p class="text-sm text-destructive hidden" id="emailError"></p>
        </div>
        
        <div class="space-y-2">
          <label for="company" class="text-sm font-medium">Company</label>
          <input 
            type="text" 
            id="company" 
            name="company" 
            required
            class="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
          />
          <p class="text-sm text-destructive hidden" id="companyError"></p>
        </div>
        
        <div class="space-y-2">
          <label for="interest" class="text-sm font-medium">Area of Interest</label>
          <select 
            id="interest" 
            name="interest" 
            required
            class="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
          >
            <option value="">Select your interest</option>
            <option value="Attack Surface Management">Attack Surface Management</option>
            <option value="IoT Security Testing">IoT Security Testing</option>
            <option value="Both Services">Both Services</option>
            <option value="Other">Other</option>
          </select>
          <p class="text-sm text-destructive hidden" id="interestError"></p>
        </div>
        
        <div class="space-y-2">
          <label for="message" class="text-sm font-medium">Message</label>
          <textarea 
            id="message" 
            name="message" 
            rows="4" 
            required
            class="flex w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
          ></textarea>
          <p class="text-sm text-destructive hidden" id="messageError"></p>
        </div>
        
        <div>
          <button 
            type="submit" 
            id="submitButton"
            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-9 px-4 py-2 w-full md:w-auto"
          >
            Submit
          </button>
          <div id="formStatus" class="mt-4"></div>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    // Set up form submission
    const contactForm = document.getElementById('contactForm');
    
    if (contactForm) {
      contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = document.getElementById('submitButton');
        const formStatus = document.getElementById('formStatus');
        
        // Reset previous error messages
        document.querySelectorAll('.text-destructive').forEach(el => el.classList.add('hidden'));
        
        // Get form data
        const formData = new FormData(contactForm as HTMLFormElement);
        const data = Object.fromEntries(formData.entries());
        
        try {
          // Disable submit button and show loading state
          if (submitButton) {
            submitButton.disabled = true;
            submitButton.textContent = 'Submitting...';
          }
          
          // Submit the form
          const response = await fetch('/api/contact.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            // Show success message
            if (formStatus) {
              formStatus.innerHTML = `
                <div class="p-4 bg-green-50 border border-green-200 text-green-800 rounded-md">
                  Thank you! Your message has been submitted successfully.
                </div>
              `;
            }
            
            // Reset the form
            contactForm.reset();
          } else {
            throw new Error(result.message || 'Something went wrong. Please try again.');
          }
        } catch (error) {
          console.error('Error submitting form:', error);
          
          // Show error message
          if (formStatus) {
            formStatus.innerHTML = `
              <div class="p-4 bg-red-50 border border-red-200 text-red-800 rounded-md">
                ${error instanceof Error ? error.message : 'Something went wrong. Please try again.'}
              </div>
            `;
          }
          
          // Handle validation errors
          if (error instanceof Error && error.message.includes('Validation error')) {
            try {
              const errorDetails = JSON.parse(error.message.replace('Validation error: ', ''));
              
              for (const [field, message] of Object.entries(errorDetails)) {
                const errorElement = document.getElementById(`${field}Error`);
                if (errorElement) {
                  errorElement.textContent = message as string;
                  errorElement.classList.remove('hidden');
                }
              }
            } catch (e) {
              console.error('Error parsing validation errors:', e);
            }
          }
        } finally {
          // Re-enable submit button
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = 'Submit';
          }
        }
      });
    }
    
    // Animation setup
    const animatedElements = document.querySelectorAll('[data-animate]');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const animationType = entry.target.getAttribute('data-animate');
          entry.target.classList.add(animationType);
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    animatedElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>

<style>
  [data-animate] {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .fade-up {
    opacity: 1;
    transform: translateY(0);
  }
</style>